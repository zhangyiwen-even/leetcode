"""
在柠檬水摊上，每一杯柠檬水的售价为 5 美元。
顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
注意，一开始你手头没有任何零钱。
如果你能给每位顾客正确找零，返回 true ，否则返回 false 。

示例 1：
输入：[5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。

示例 2：
输入：[5,5,10]
输出：true

示例 3：
输入：[10,10]
输出：false

示例 4：
输入：[5,5,10,10,20]
输出：false
解释：
前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
由于不是每位顾客都得到了正确的找零，所以答案是 false。
 
提示：
0 <= bills.length <= 10000
bills[i] 不是 5 就是 10 或是 20 
"""

# 思路:
# 如果首位不为5，肯定无法找零，直接输出False;
# 否则的话，模拟整个找零过程，记录5块和10快的数量，不用记录20的，
# 因为20是无法拿来找零的，收到5快的five+=1,收到10块的ten+=1,five-=1,
# 收到20的话要注意一下，有10块的话优先拿一张10块1张5块找零，没有10块拿3张5块找零，
# 每次找零后若five<0或ten<0则说明找零失败。

class Solution(object):
    def lemonadeChange(self, bills):
        """
        :type bills: List[int]
        :rtype: bool
        """
        # 判断列表第一个值是否为5，不为5直接输出false，bool()函数当括号为0或空时为false
        if bills[0] != 5:
            return False
        else:
            # 给变量赋值，因为第一个元素为5，所以five赋值为1
            five = 1
            ten = 0
            # 遍历第一个之后的数:
            for num in bills[1:]:
                # 如果是5
                if num == 5:
                    five += 1
                # 10 找零-5 10的数+1
                elif num == 10:
                    five -= 1
                    ten += 1
                # 如果是20
                else:
                    # 有10的情况 找一张10 一张5
                    if ten >= 1:
                        ten -= 1
                        five -= 1
                    # 没有10  找3张5
                    else:
                        five -= 3
                # 如果5跟10都没有了 输出False
                if five < 0 or ten < 0:
                    return False
                    break
            else:
                return True
s = Solution()
print(s.lemonadeChange([5,5,10,10,20,10]))